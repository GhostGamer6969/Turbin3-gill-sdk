/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const VAULT_DISCRIMINATOR = new Uint8Array([
  211, 8, 232, 43, 2, 152, 117, 119,
]);

export function getVaultDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VAULT_DISCRIMINATOR);
}

export type Vault = {
  discriminator: ReadonlyUint8Array;
  masterhash: Address;
  entryCount: bigint;
  cidCount: bigint;
};

export type VaultArgs = {
  masterhash: Address;
  entryCount: number | bigint;
  cidCount: number | bigint;
};

export function getVaultEncoder(): FixedSizeEncoder<VaultArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['masterhash', getAddressEncoder()],
      ['entryCount', getU64Encoder()],
      ['cidCount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VAULT_DISCRIMINATOR })
  );
}

export function getVaultDecoder(): FixedSizeDecoder<Vault> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['masterhash', getAddressDecoder()],
    ['entryCount', getU64Decoder()],
    ['cidCount', getU64Decoder()],
  ]);
}

export function getVaultCodec(): FixedSizeCodec<VaultArgs, Vault> {
  return combineCodec(getVaultEncoder(), getVaultDecoder());
}

export function decodeVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Vault, TAddress>;
export function decodeVault<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Vault, TAddress>;
export function decodeVault<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Vault, TAddress> | MaybeAccount<Vault, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVaultDecoder()
  );
}

export async function fetchVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Vault, TAddress>> {
  const maybeAccount = await fetchMaybeVault(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVault<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Vault, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVault(maybeAccount);
}

export async function fetchAllVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Vault>[]> {
  const maybeAccounts = await fetchAllMaybeVault(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVault(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Vault>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVault(maybeAccount));
}

export function getVaultSize(): number {
  return 56;
}
