/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const CID_ENTRY_DISCRIMINATOR = new Uint8Array([
  145, 9, 199, 248, 9, 2, 196, 104,
]);

export function getCidEntryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CID_ENTRY_DISCRIMINATOR);
}

export type CidEntry = {
  discriminator: ReadonlyUint8Array;
  cid: string;
  timeStored: bigint;
};

export type CidEntryArgs = { cid: string; timeStored: number | bigint };

export function getCidEntryEncoder(): Encoder<CidEntryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['cid', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['timeStored', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CID_ENTRY_DISCRIMINATOR })
  );
}

export function getCidEntryDecoder(): Decoder<CidEntry> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['cid', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['timeStored', getU64Decoder()],
  ]);
}

export function getCidEntryCodec(): Codec<CidEntryArgs, CidEntry> {
  return combineCodec(getCidEntryEncoder(), getCidEntryDecoder());
}

export function decodeCidEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CidEntry, TAddress>;
export function decodeCidEntry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CidEntry, TAddress>;
export function decodeCidEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<CidEntry, TAddress> | MaybeAccount<CidEntry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCidEntryDecoder()
  );
}

export async function fetchCidEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CidEntry, TAddress>> {
  const maybeAccount = await fetchMaybeCidEntry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCidEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CidEntry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCidEntry(maybeAccount);
}

export async function fetchAllCidEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CidEntry>[]> {
  const maybeAccounts = await fetchAllMaybeCidEntry(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCidEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CidEntry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCidEntry(maybeAccount));
}
