/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedAddCidEntryInstruction,
  type ParsedAddVaultEntryInstruction,
  type ParsedDeleteCidInstruction,
  type ParsedDeleteEntryInstruction,
  type ParsedInitializeVaultInstruction,
  type ParsedUpdateEntryInstruction,
} from '../instructions';

export const VERSION3_PROGRAM_ADDRESS = '' as Address<''>;

export enum Version3Account {
  Vault,
  VaultEntry,
  CidEntry,
}

export function identifyVersion3Account(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): Version3Account {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 8, 232, 43, 2, 152, 117, 119])
      ),
      0
    )
  ) {
    return Version3Account.Vault;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 13, 244, 166, 187, 153, 172, 22])
      ),
      0
    )
  ) {
    return Version3Account.VaultEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 9, 199, 248, 9, 2, 196, 104])
      ),
      0
    )
  ) {
    return Version3Account.CidEntry;
  }
  throw new Error(
    'The provided account could not be identified as a version3 account.'
  );
}

export enum Version3Instruction {
  InitializeVault,
  AddVaultEntry,
  AddCidEntry,
  UpdateEntry,
  DeleteEntry,
  DeleteCid,
}

export function identifyVersion3Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): Version3Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 191, 163, 44, 71, 129, 63, 164])
      ),
      0
    )
  ) {
    return Version3Instruction.InitializeVault;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([71, 222, 28, 138, 157, 179, 57, 68])
      ),
      0
    )
  ) {
    return Version3Instruction.AddVaultEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 8, 230, 28, 59, 233, 164, 223])
      ),
      0
    )
  ) {
    return Version3Instruction.AddCidEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 47, 181, 2, 1, 40, 2, 92])
      ),
      0
    )
  ) {
    return Version3Instruction.UpdateEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 198, 83, 191, 70, 23, 194, 58])
      ),
      0
    )
  ) {
    return Version3Instruction.DeleteEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([39, 230, 146, 240, 53, 19, 196, 226])
      ),
      0
    )
  ) {
    return Version3Instruction.DeleteCid;
  }
  throw new Error(
    'The provided instruction could not be identified as a version3 instruction.'
  );
}

export type ParsedVersion3Instruction<TProgram extends string = ''> =
  | ({
      instructionType: Version3Instruction.InitializeVault;
    } & ParsedInitializeVaultInstruction<TProgram>)
  | ({
      instructionType: Version3Instruction.AddVaultEntry;
    } & ParsedAddVaultEntryInstruction<TProgram>)
  | ({
      instructionType: Version3Instruction.AddCidEntry;
    } & ParsedAddCidEntryInstruction<TProgram>)
  | ({
      instructionType: Version3Instruction.UpdateEntry;
    } & ParsedUpdateEntryInstruction<TProgram>)
  | ({
      instructionType: Version3Instruction.DeleteEntry;
    } & ParsedDeleteEntryInstruction<TProgram>)
  | ({
      instructionType: Version3Instruction.DeleteCid;
    } & ParsedDeleteCidInstruction<TProgram>);
