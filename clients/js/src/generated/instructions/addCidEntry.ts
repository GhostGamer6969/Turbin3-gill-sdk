/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VERSION3_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_CID_ENTRY_DISCRIMINATOR = new Uint8Array([
  124, 8, 230, 28, 59, 233, 164, 223,
]);

export function getAddCidEntryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_CID_ENTRY_DISCRIMINATOR
  );
}

export type AddCidEntryInstruction<
  TProgram extends string = typeof VERSION3_PROGRAM_ADDRESS,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountCidEntry extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountCidEntry extends string
        ? WritableAccount<TAccountCidEntry>
        : TAccountCidEntry,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddCidEntryInstructionData = {
  discriminator: ReadonlyUint8Array;
  masterhash: Address;
  cEntryIndex: bigint;
  cid: string;
};

export type AddCidEntryInstructionDataArgs = {
  masterhash: Address;
  cEntryIndex: number | bigint;
  cid: string;
};

export function getAddCidEntryInstructionDataEncoder(): Encoder<AddCidEntryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['masterhash', getAddressEncoder()],
      ['cEntryIndex', getU64Encoder()],
      ['cid', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: ADD_CID_ENTRY_DISCRIMINATOR })
  );
}

export function getAddCidEntryInstructionDataDecoder(): Decoder<AddCidEntryInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['masterhash', getAddressDecoder()],
    ['cEntryIndex', getU64Decoder()],
    ['cid', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getAddCidEntryInstructionDataCodec(): Codec<
  AddCidEntryInstructionDataArgs,
  AddCidEntryInstructionData
> {
  return combineCodec(
    getAddCidEntryInstructionDataEncoder(),
    getAddCidEntryInstructionDataDecoder()
  );
}

export type AddCidEntryInput<
  TAccountVault extends string = string,
  TAccountCidEntry extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  vault: Address<TAccountVault>;
  cidEntry: Address<TAccountCidEntry>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
  masterhash: AddCidEntryInstructionDataArgs['masterhash'];
  cEntryIndex: AddCidEntryInstructionDataArgs['cEntryIndex'];
  cid: AddCidEntryInstructionDataArgs['cid'];
};

export function getAddCidEntryInstruction<
  TAccountVault extends string,
  TAccountCidEntry extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VERSION3_PROGRAM_ADDRESS,
>(
  input: AddCidEntryInput<
    TAccountVault,
    TAccountCidEntry,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddCidEntryInstruction<
  TProgramAddress,
  TAccountVault,
  TAccountCidEntry,
  TAccountUser,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VERSION3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vault: { value: input.vault ?? null, isWritable: true },
    cidEntry: { value: input.cidEntry ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.cidEntry),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAddCidEntryInstructionDataEncoder().encode(
      args as AddCidEntryInstructionDataArgs
    ),
    programAddress,
  } as AddCidEntryInstruction<
    TProgramAddress,
    TAccountVault,
    TAccountCidEntry,
    TAccountUser,
    TAccountSystemProgram
  >);
}

export type ParsedAddCidEntryInstruction<
  TProgram extends string = typeof VERSION3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    vault: TAccountMetas[0];
    cidEntry: TAccountMetas[1];
    user: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: AddCidEntryInstructionData;
};

export function parseAddCidEntryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddCidEntryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vault: getNextAccount(),
      cidEntry: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAddCidEntryInstructionDataDecoder().decode(instruction.data),
  };
}
